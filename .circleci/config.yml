version: 2.1

parameters:
  cron:
    type: boolean
    default: false

orbs:
  sonar: hubci/sonar@1.0.0

workflows:
  daily-cron:
    when: << pipeline.parameters.cron >>
    jobs:
      - cimg-readme-sync:
          matrix:
            parameters:
              image:
                - "cimg/android"
                - "cimg/aws"
                - "cimg/azure"
                - "cimg/base"
                - "cimg/clojure"
                - "cimg/deploy"
                - "cimg/elixir"
                - "cimg/gcp"
                - "cimg/go"
                - "cimg/mariadb"
                - "cimg/mysql"
                - "cimg/node"
                - "cimg/openjdk"
                - "cimg/postgres"
                - "cimg/php"
                - "cimg/python"
                - "cimg/redis"
                - "cimg/ruby"
                - "cimg/rust"
          context: readme-sync-context

  legacy-database-testing-cron:
    when: << pipeline.parameters.cron >>
    jobs:
      - legacy-test-mariadb:
          version: "10.1"
          name: "MariaDB v10.1"
      - legacy-test-mariadb:
          version: "10.2"
          name: "MariaDB v10.2"
      - legacy-test-mariadb:
          version: "10.3"
          name: "MariaDB v10.3"
      - legacy-test-mariadb:
          version: "10.4"
          name: "MariaDB v10.4"
      - legacy-test-mysql:
          version: "5.6"
          name: "MySQL v5.6"
      - legacy-test-mysql:
          version: "5.7"
          name: "MySQL v5.7"
      - legacy-test-mysql:
          version: "8.0"
          name: "MySQL v8.0"
      - legacy-test-postgresql:
          version: "9.4"
          name: "Postgres v9.4"
      - legacy-test-postgresql:
          version: "9.5"
          name: "Postgres v9.5"
      - legacy-test-postgresql:
          version: "9.6"
          name: "Postgres v9.6"
      - legacy-test-postgresql:
          version: "10.10"
          name: "Postgres v10.10"
      - legacy-test-postgresql:
          version: "11.5"
          name: "Postgres v11.5"
      - legacy-test-postgresql:
          version: "12.0"
          name: "Postgres v12.0"
      - legacy-test-mongodb:
          version: "3.6"
          name: "MongoDB v3.6"
      - legacy-test-mongodb:
          version: "4.0"
          name: "MongoDB v4.0"
      - legacy-test-mongodb:
          version: "4.2"
          name: "MongoDB v4.2"
  legacy-database-testing:
    when:
    jobs:
      - legacy-test-mariadb:
          version: "10.1"
          name: "MariaDB v10.1"
      - legacy-test-mariadb:
          version: "10.2"
          name: "MariaDB v10.2"
      - legacy-test-mariadb:
          version: "10.3"
          name: "MariaDB v10.3"
      - legacy-test-mariadb:
          version: "10.4"
          name: "MariaDB v10.4"
      - legacy-test-mysql:
          version: "5.6"
          name: "MySQL v5.6"
      - legacy-test-mysql:
          version: "5.7"
          name: "MySQL v5.7"
      - legacy-test-mysql:
          version: "8.0"
          name: "MySQL v8.0"
      - legacy-test-postgresql:
          version: "9.4"
          name: "Postgres v9.4"
      - legacy-test-postgresql:
          version: "9.5"
          name: "Postgres v9.5"
      - legacy-test-postgresql:
          version: "9.6"
          name: "Postgres v9.6"
      - legacy-test-postgresql:
          version: "10.10"
          name: "Postgres v10.10"
      - legacy-test-postgresql:
          version: "11.5"
          name: "Postgres v11.5"
      - legacy-test-postgresql:
          version: "12.0"
          name: "Postgres v12.0"
      - legacy-test-mongodb:
          version: "3.6"
          name: "MongoDB v3.6"
      - legacy-test-mongodb:
          version: "4.0"
          name: "MongoDB v4.0"
      - legacy-test-mongodb:
          version: "4.2"
          name: "MongoDB v4.2"

jobs:
  cimg-readme-sync:
    parameters:
      image:
        type: string
    docker:
      - image: cimg/base:2022.01
    steps:
      - run: |
          repoName=$(echo "<< parameters.image >>" | sed -e 's/\//-/g')
          curl -sSL -o README.md "https://raw.githubusercontent.com/CircleCI-Public/${repoName}/main/README.md"
      - sonar/install:
          version: "0.18.0"
      - sonar/update-readme:
          image: << parameters.image >>

  legacy-test-mariadb:
    parameters:
      version:
        description: "MariaDB version to test."
        type: string
    docker:
      - image: cimg/base:stable
      - image: circleci/mariadb:<< parameters.version >>
    steps:
      - run:
          name: "Install MariaDB Client"
          command: sudo apt-get update && sudo apt-get install -y mysql-client
      - run:
          name: "Wait For DB to be Ready"
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
      - run:
          name: "Verify MariaDB Version"
          command: sudo mysql -h 127.0.0.1 -e 'SELECT VERSION();' | grep "<< parameters.version >>"
      - run:
          name: "Try Creating a New Database"
          command: sudo mysql -h 127.0.0.1 -e 'CREATE DATABASE my_test_database;'
  legacy-test-mysql:
    parameters:
      version:
        description: "MySQL version to test."
        type: string
    docker:
      - image: cimg/base:stable
      - image: circleci/mysql:<< parameters.version >>
    steps:
      - run:
          name: "Install MySQL Client"
          command: sudo apt-get update && sudo apt-get install -y mysql-client
      - run:
          name: "Wait For DB to be Ready"
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
      - run:
          name: "Verify MySQL Version"
          command: sudo mysql -h 127.0.0.1 -e 'SELECT VERSION();' | grep "<< parameters.version >>"
      - run:
          name: "Try Creating a New Database"
          command: |
            sudo mysql -h 127.0.0.1 -e 'CREATE DATABASE my_test_database;'
            sudo mysql -h 127.0.0.1 -e 'SHOW DATABASES;'
  legacy-test-postgresql:
    parameters:
      version:
        description: "PostgreSQL version to test."
        type: string
    docker:
      - image: cimg/base:stable
      - image: circleci/postgres:<< parameters.version >>
        environment:
          POSTGRES_USER: circleci
          POSTGRES_HOST_AUTH_METHOD: trust
    steps:
      - run:
          name: "Install PostgreSQL Client"
          command: sudo apt-get update && sudo apt-get install -y postgresql-client
      - run:
          name: "Wait For DB to be Ready"
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: "Verify PostgreSQL Version"
          command: PAGER=cat psql -d postgres -U circleci -h 127.0.0.1 -c 'SELECT version();'
      - run:
          name: "Try Creating a New Database"
          command: |
            PAGER=cat psql -d circle_test -U circleci -h 127.0.0.1 -c 'CREATE DATABASE my_test_database;'
            PAGER=cat psql -d circle_test -U circleci -h 127.0.0.1 -c '\list'
  legacy-test-mongodb:
    parameters:
      version:
        description: "MongoDB version to test."
        type: string
    docker:
      - image: cimg/base:stable
      - image: circleci/mongo:<< parameters.version >>
    steps:
      - run:
          name: "Install MongoDB Shell"
          command: sudo apt-get update && sudo apt-get install -y mongodb-clients
      - run:
          name: "Wait For DB to be Ready"
          command: dockerize -wait tcp://localhost:27017 -timeout 1m
      - run:
          name: "Verify MongoDB Version"
          command: |
            mongo 127.0.0.1 --eval 'db.version()' | grep 'MongoDB server version: << parameters.version >>'
      - run:
          name: "Try Creating a New Database"
          command: |
            mongo 127.0.0.1 --eval 'db = db.getSiblingDB("my_test_database")'
            mongo 127.0.0.1 --eval 'db.adminCommand( "listDatabases" )'
